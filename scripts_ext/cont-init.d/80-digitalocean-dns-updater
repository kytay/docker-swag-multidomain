#!/usr/bin/with-contenv bash

echo -e "Variables set:\\n\
DNSPLUGIN=${DNSPLUGIN}\\n\
DIGITALOCEAN_API_TOKEN=${DIGITALOCEAN_API_TOKEN}\\n\
USER_MULTI_DOMAINS=${USER_MULTI_DOMAINS}\\n\
USER_HOSTNAME=${USER_HOSTNAME}\\n"

RED='\033[0;31m'
END='\033[0m'

# Check if doctl already exist, for handling docker-compose already created container
EXIST_DOCTL=$(which doctl)

# Request for letsencrypt cert for each domain, e.g abc.com,xyz.com,somedomain.com
DOM_LIST=($(echo ${USER_MULTI_DOMAINS} | tr "," " "))

DOCKER_HOSTNAME=$(hostname)
USER_HOSTNAME=${USER_HOSTNAME:-${DOCKER_HOSTNAME}}
EXIST_API_KEY=$(cat /config/dns-conf/.digitalocean-secret | egrep "^dns" | awk '{print $3}')

if [ -z "${EXIST_API_KEY}" ] && [ -n "${DNSPLUGIN}" ] && [ "${DNSPLUGIN}" == "digitalocean" ]
then
    if [ -z "${DIGITALOCEAN_API_TOKEN}" ]
    then
        printf "${RED}DIGITALOCEAN_API_TOKEN not provided.\nExiting...${END}\n"
        exit 1
    else
        DO_INI=/config/dns-conf/digitalocean.ini
        sed -i "s/dns_digitalocean_token/#dns_digitalocean_token/g" ${DO_INI}
        echo "dns_digitalocean_token = ${DIGITALOCEAN_API_TOKEN}" >> ${DO_INI}
        ln -s /config/dns-conf/digitalocean.ini /config/dns-conf/.digitalocean-secret
    fi
fi

if [ -n "${EXIST_API_KEY}" ]
then
  DIGITALOCEAN_API_TOKEN=${EXIST_API_KEY}
fi

download_and_intstall_doctl() {
    if [ -z "$DOCTL_VER" ]
    then
        DOCTL_VER=$(curl --silent "https://api.github.com/repos/digitalocean/doctl/releases/latest" | grep "tag_name" | grep -Eo "([0-9\.]*)")
    fi

    curl -OL https://github.com/digitalocean/doctl/releases/download/v${DOCTL_VER}/doctl-${DOCTL_VER}-linux-amd64.tar.gz && \
    tar xf ./doctl-${DOCTL_VER}-linux-amd64.tar.gz && \
    mv ./doctl /usr/local/bin && \
    ln -s /usr/local/bin/doctl /usr/bin/doctl
}

if [ -z "$EXIST_DOCTL" ]
then
    download_and_intstall_doctl
    crontab -l > $(date --rfc-3339=date)_crontab
    echo "*/5 * * * * /app/do-dnsupdate.sh >> /tmp/last-dns-update.log" >> $(date --rfc-3339=date)_crontab
    echo "" >> $(date --rfc-3339=date)_crontab
    crontab $(date --rfc-3339=date)_crontab
fi

PUBLIC_IP=$(curl -L https://api.ipify.org/ || curl -L https://ipv4.icanhazip.com/)

for EACH_DOMAIN in "${DOM_LIST[@]}"
do
    echo "Performing DNS activities for ${EACH_DOMAIN}..."
    DNS_A_RECORD_ID=$(doctl compute domain records list ${EACH_DOMAIN} -t ${DIGITALOCEAN_API_TOKEN} | grep ${USER_HOSTNAME} | grep " A " | awk '{print $1}')

    DNS_WILDCARD_CNAME_RECORD_ID=$(doctl compute domain records list ${EACH_DOMAIN} -t ${DIGITALOCEAN_API_TOKEN} | grep *.${USER_HOSTNAME} | awk '{print $1}')
    DNS_WILDCARD_CNAME_RECORD_NAME="*.${USER_HOSTNAME}"
    DNS_WILDCARD_CNAME_RECORD_DATA="${USER_HOSTNAME}.${EACH_DOMAIN}."

    if [ "${USER_HOSTNAME}" == "@" ]
    then
        DNS_WILDCARD_CNAME_RECORD_ID=$(doctl compute domain records list ${EACH_DOMAIN} -t ${DIGITALOCEAN_API_TOKEN} | grep "*" | grep "@" | awk '{print $1}')
        DNS_WILDCARD_CNAME_RECORD_DATA="@"
    fi

    if [ -z "${DNS_A_RECORD_ID}" ]
    then
        echo "Creating new DNS A record..."
        doctl compute domain records create ${EACH_DOMAIN} \
        --record-type A \
        --record-name="${USER_HOSTNAME}" \
        --record-data="${PUBLIC_IP}" \
        -t ${DIGITALOCEAN_API_TOKEN}
    else
        echo "Updating DNS A record ${DNS_A_RECORD_ID}..."
        doctl compute domain records update ${EACH_DOMAIN} \
        --record-id="${DNS_A_RECORD_ID}" \
        --record-data="${PUBLIC_IP}" \
        -t ${DIGITALOCEAN_API_TOKEN}
    fi

    if [ -z "${DNS_WILDCARD_CNAME_RECORD_ID}" ]
    then
        echo "Creating new DNS CNAME record..."
        doctl compute domain records create ${EACH_DOMAIN} \
        --record-type CNAME \
        --record-name ${DNS_WILDCARD_CNAME_RECORD_NAME} \
        --record-data ${DNS_WILDCARD_CNAME_RECORD_DATA} \
        -t ${DIGITALOCEAN_API_TOKEN}
    else
        echo "Updating DNS CNAME record ${DNS_WILDCARD_CNAME_RECORD_ID}..."
        doctl compute domain records update ${EACH_DOMAIN} \
        --record-id ${DNS_WILDCARD_CNAME_RECORD_ID} \
        --record-data ${DNS_WILDCARD_CNAME_RECORD_DATA} \
        -t ${DIGITALOCEAN_API_TOKEN}
    fi

done

echo "DNS Last Updated $(date)"

exit 0